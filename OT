
Require Export "Prop". 
Inductive function (X:Type) : Type:=
  |fInsert: nat -> X->function X
  |fDelete: nat -> function X.
Fixpoint beq_nat n m : bool :=
   match n, m with
     | O, O => true
     | O, S _ => false
     | S _, O => false
     | S n1, S m1 => beq_nat n1 m1
   end.
Fixpoint ble_nat n m : bool :=  (*n<m*)
   match n, m with
     | O, O => false
     | O, S _ => true
     | S _, O => false
     | S n1, S m1 => ble_nat n1 m1
   end.


Definition function_eqdel {X:Type} (a b:function X) : bool :=
  match a, b with 
  |fDelete n1,fDelete n2 => beq_nat n1 n2
  |_,_ =>false
  end.

Fixpoint insert1 {X:Type} n x (l:list X):list X:=
  match n with 
  |0 => x::l
  |S n' =>match l with
    |[] => []
    |h::l' => h::(insert1 n' x l')
    end
  end.

Fixpoint insert {X:Type} n x (l:list X): option (list X):=
if ble_nat (length l) n then None else Some(insert1 n x l).

Definition apply {X:Type} (f:function X) (l:list X): list X:=
  match f with 
  |insert n x => 

  